from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import logging
import time
from datetime import datetime
import asyncio

API_TOKEN = '7510854780:AAFLKxbZ2rQsq10DcQ9uTNg2dvU2PimWtHw'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

users = {}
admin_id = 954053674
days_content = {i: {"videos": 1, "completed": False} for i in range(1, 46)}

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    users[user_id] = {"current_day": 1, "completed_days": 0, "notifications_enabled": True, "last_video_time": 0}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–∏–º–∞–π '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ.",
        reply_markup=await get_start_keyboard()
    )

async def get_start_keyboard():
    keyboard = [['–î–µ–Ω—å 1']]
    return {'keyboard': keyboard, 'resize_keyboard': True, 'one_time_keyboard': True}

async def handle_day(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    current_day = users[user_id]["current_day"]

    if current_day > 45:
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!")
        return

    if current_day == 1:
        await update.message.reply_text(
            "–¢—ã –≤—ã–±—Ä–∞–ª –î–µ–Ω—å 1. –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –∏ –∂–º–∏ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
            reply_markup=await get_day_keyboard(current_day)
        )
    else:
        if users[user_id]["completed_days"] >= current_day:
            await update.message.reply_text(
                f"–¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª {current_day} –¥–µ–Ω—å. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å!",
                reply_markup=await get_day_keyboard(current_day)
            )
        else:
            await update.message.reply_text(f"–¢—ã –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –î–Ω—é {current_day}.")

async def get_day_keyboard(day):
    return {'keyboard': [['–ì–æ—Ç–æ–≤–æ']], 'resize_keyboard': True, 'one_time_keyboard': True}

async def handle_done(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    current_day = users[user_id]["current_day"]

    if time.time() - users[user_id].get("last_video_time", 0) < 180:
        await update.message.reply_text("–í—ã –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã 45 —Å–µ–∫—É–Ω–¥.")
    else:
        users[user_id]["completed_days"] += 1
        users[user_id]["last_video_time"] = time.time()

        if users[user_id]["completed_days"] == 45:
            await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! üéâ")
        else:
            users[user_id]["current_day"] += 1
            await update.message.reply_text(f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –î–µ–Ω—å {current_day}. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é!")

async def handle_complete_day(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    current_day = users[user_id]["current_day"]
    
    if current_day == 45:
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–µ—Å—å –∫—É—Ä—Å! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")
    else:
        await update.message.reply_text("–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

async def admin_panel(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id == admin_id:
        keyboard = [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏', '–í—ã—Ö–æ–¥']]
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup={'keyboard': keyboard, 'resize_keyboard': True})

async def edit_day(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id == admin_id:
        day = int(update.message.text.split()[1])
        await update.message.reply_text(f"–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –î–µ–Ω—å {day}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:")

async def set_video_count(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id == admin_id:
        day = int(update.message.text.split()[1])
        video_count = int(update.message.text.split()[2])
        days_content[day]["videos"] = video_count
        await update.message.reply_text(f"–î–ª—è –î–Ω—è {day} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {video_count} –≤–∏–¥–µ–æ.")

async def get_rating(update: Update, context: CallbackContext) -> None:
    sorted_users = sorted(users.items(), key=lambda x: x[1]["completed_days"], reverse=True)
    leaderboard = "–†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, (user_id, data) in enumerate(sorted_users[:5]):
        leaderboard += f"{i+1}. {data['completed_days']} –¥–Ω–µ–π - {user_id}\n"
    await update.message.reply_text(leaderboard)

async def main():
    application = Application.builder().token(API_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('rating', get_rating))
    application.add_handler(CommandHandler('admin_panel', admin_panel))

    application.add_handler(CallbackQueryHandler(handle_day, pattern="–î–µ–Ω—å"))
    application.add_handler(CallbackQueryHandler(handle_done, pattern="–ì–æ—Ç–æ–≤–æ"))
    application.add_handler(CallbackQueryHandler(handle_complete_day, pattern="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å"))
    application.add_handler(CallbackQueryHandler(edit_day, pattern="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    application.add_handler(MessageHandler(filters.TEXT, set_video_count))

    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
